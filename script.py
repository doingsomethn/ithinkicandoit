import requests
import base64
import json
def r(b64_str: str) -> dict:
    b64_bytes = b64_str.encode('utf-8')
    json_bytes = base64.b64decode(b64_bytes)
    json_str = json_bytes.decode('utf-8')
    return json.loads(json_str)
l = base64.b64decode("aHR0cHM6Ly9ub29yLm1vZS5nb3Yuc2EvTm9vci9FZHVXYXZlRGFzaEJvYXJkL1N0dWRlbnRQcm9ncmVzcy5hc3B4".encode('utf-8')).decode('utf-8')
e=r('')
# print(l)
# print(e)
# exit(0)
try:
    r = requests.get(l, headers=e)
    print("Request sent, status code:", 'المعدل' in r.text)
except Exception as e:
    print("Error:", e)